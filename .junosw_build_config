# ~/.bash_profile > ~/.bashrc > ~/j/.junosw_build_config

jre_notes(){ cat << EON
To allow this same script to be used on multiple nodes
setup some symbolic links in $HOME

+------------------------------+--------------------------------+---------------------------+
| symbolic link                |  N(workstation)                |  L(lxslc7)                |
+==============================+================================+===========================+
| $HOME/tmp                    |  /data/blyth/opticks           |                           |
+------------------------------+--------------------------------+---------------------------+
| $HOME/opticks_download_cache |  /data/opticks_download_cache  |                           |
+------------------------------+--------------------------------+---------------------------+

Use symbolic links to make this work on both N(workstation) and L(lxslc7) 
EON
}

_jre(){
    : settings that can run anytime without causing env confusion
    export TMP=$HOME/tmp             ## needed for runtime 
    export JUNOTOP=$HOME/junotop
    jt(){ cd $JUNOTOP && pwd ; } 
    je(){ cd $JUNOTOP/junoenv && pwd && git status ; } 
    jo(){ cd $JUNOTOP/junosw  && pwd && git status ; } 
    o(){  cd $JUNOTOP/opticks && pwd && git status ; }
    j(){  cd $HOME/j          && pwd && git status ; } 
}
_jre


_jre_opticks_build_minimal_env()
{
    export OPTICKS_COMPUTE_CAPABILITY=70
    export OPTICKS_CUDA_PREFIX=/usr/local/cuda-11.7
    export OPTICKS_OPTIX_PREFIX=/cvmfs/opticks.ihep.ac.cn/external/OptiX_750
    export OPTICKS_DOWNLOAD_CACHE=/cvmfs/opticks.ihep.ac.cn/opticks_download_cache

    : No OPTICKS_PREFIX as "bash junoenv opticks" via opticks-setup will set that 
}

_jre_opticks_build_env()
{
    : ~/j/.junosw_build_config
    : this setup enables opticks-full source build ... so its bootstrapping 
    : mostly NOT needed for release running

    export OPTICKS_CUDA_PREFIX=/usr/local/cuda-11.7
    export OPTICKS_DOWNLOAD_CACHE=/cvmfs/opticks.ihep.ac.cn/opticks_download_cache
    export OPTICKS_OPTIX_PREFIX=/cvmfs/opticks.ihep.ac.cn/external/OptiX_750
    export OPTICKS_COMPUTE_CAPABILITY=70

    opticks-(){ source $JUNOTOP/opticks/opticks.bash && opticks-env $* ; }
    opticks-

    oo(){ opticks- ; cd $(opticks-home) ; om- ; om-- ;  }  
    : running oo needs OPTICKS_PREFIX to find bin/opticks-setup.sh

    export OPTICKS_PREFIX=$JUNOTOP/ExternalLibs/opticks/head
    export OPTICKS_HOME=$JUNOTOP/opticks

    : env setup used by om- oe- needs the opticks-setup.sh 
    : generated as part of opticks-full : so "oo" only works
    : for rebuilding after small changes, not initial building
    : initial building requires opticks-full 
}

_jre_opticks_usage_env()
{
    : this setup is needed for building junosw with opticks as external 
    : HMM: OPTICKS_PREFIX already exported in the bashrc : after first build 
    : HMM: OPTICKS_HOME kinda dirty use of the source tree, not available in binary releases

    export OPTICKS_PREFIX=$JUNOTOP/ExternalLibs/opticks/head
    export OPTICKS_HOME=$JUNOTOP/opticks
    export PYTHONPATH=$(dirname $OPTICKS_HOME):$PYTHONPATH

    opticks-(){ source $JUNOTOP/opticks/opticks.bash && opticks-env $* ; }
    opticks-

    #source /cvmfs/opticks.ihep.ac.cn/ok/releases/Opticks-v0.2.1/x86_64-CentOS7-gcc1120-geant4_10_04_p02-dbg/bashrc
    source $HOME/junotop/ExternalLibs/opticks/head/bashrc
}

jre(){ 
    : ~/j/.junosw_build_config
    _jre 

    source $JUNOTOP/bashrc.sh  ## opticks sourcing is commented in here for clarity 

    #_jre_opticks_build_minimal_env
    _jre_opticks_build_env    
    _jre_opticks_usage_env  
    : NB after any changes, for clarity start a new session and redo jre

    source $JUNOTOP/sniper/InstallArea/bashrc;
    source $JUNOTOP/sniper/InstallArea/share/sniper/setup.sh;
    source $JUNOTOP/mt.sniper/InstallArea/bashrc;

    _source(){ [ -s "$1" ] && source "$1" ; }
    _source $JUNOTOP/junosw/InstallArea/setup.sh
}
