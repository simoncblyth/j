Hi Yuhan, 

> https://code.ihep.ac.cn/JUNO/offline/junosw/-/commit/4c68aa526297d492fe3383678e7a51fb22f9a919
> 
> 
> > Did you try using cos(theta) rather than directly theta ?  
> > This is because obtaining cos(theta) is cheap but doing acos is expensive.   
> 
> I used d(theta) rather than d(cos(theta)) since we use ce(theta) in the current
> simulation, and they had better be consistent. 

Using theta or cos(theta) is a modelling choice. 
Both can be made to work correctly. 

> I tried fitting with
> d(cos(theta)), but results are no better than d(theta). 

Getting the same results is what I would expect. 
The performance of the two will likely be significantly 
different however. 


> Besides, in the process
> I obtain the new ce, the reference points for ce will be changed from theta to
> cos(theta), which affects the weight I give to each point and lead to a
> different ce . Actually I think it's hard to say theta or cos(theta) which one
> is more reasonable from a physical perspective.
> 
> I perfer to use theta temporarily. If millions of theta calculations decrease
> the speed significantly, we can update it to d(cos(theta)) as well as
> ce(cos(theta)).
> 

OK


> > About your PMTSimParamSvc::get_pmtid_ce_v2 from
> ...
> > You can use a C array or std::array of pointers to G4MaterialPropertyVector
> 
> I added PMTSimParamSvc::init_CD_LPMT_ce and G4MaterialPropertyVector* PMTSimParamSvc::get_CD_LPMT_ce.


When you know the size of something quite large like the m_CD_LPMT_ce 
vector ahead of time (its m_PmtTotal elements) you should size the vector first 
and not use push_back. Otherwise your vector will undergo multiple reallocations
as more pointers are pushed onto it. 

To do that simply start with::

    m_CD_LPMT_ce.resize(m_PmtTotal) 

Then instead of push_back you can populate it directly with::

    m_CD_LPMT_ce[idx] = vec ; 


 
> > Using a boolean for the PMT implementation is not convenient if you want to change the implementation later
> > and compare between them. I suggest an integer implementation version. See:
> > 
> >    https://github.com/simoncblyth/customgeant4/commit/48ad617a371df97e02bc7233b34b82d980034e30
> > 
> > 
> > > When m_UsePMTOpticalModel == true && m_Use_PMTNaturalGeometry == false && m_EnablePMTBackwardPhoton == false, it will call helper_fast_sim.
> > 
> > Its better to pass the implementation_version integer into custom4 and avoid the 
> > branching.  
> > 
> > > For other combinations of conditions, I think they're not under consideration for simplicity.
> > 
> > You should assert on unexpected combinations of conditions with error messsage. 
> 
> I added accessor and error messsage.



 
> 
> > > I added ESCAPE files for 3 types of PMTs, and corresponding functions
> > > PMTSimParamSvc::get_pmtcat_escape and PMTSimParamSvc::get_pmtid_escape.
> ...

> 
> > > A tricky thing is that some new CE values are over 1, which could be caused by
> > > the uncerntainty of escape factor and the overly simplified model, so it will
> > > lead to PDE sampling issues under the previous logic at junoSD_PMT_v2.cc. 
> > 
> > Point to the code with this issue. 
> > What is the solution ? std::min(ce, 1. ) ? 
> > 
> > > To avoid the problems, I propose not calculating QE but only A in custom4 and
> > > applying escape factor at junoSD_PMT_v2.cc when 
> > > m_EnablePMTBackwardPhoton == true.
> > 
> > You need to elaborate on how this could work. The normal incidence
> > stack calc is needed for "An" to give theEfficiency but the 
> > non-normal incidence stack calc is needed too for the A,R,T 
> > so I dont see how your proposal could work ?
> 
> In the current simulation, 
> escape = QE/An
> (docdb-8400)
> 
> 
>         PDE
> QE = ------------
>        Sum CE_i * w_i
>         i 1:7
> 
> 
> where PDE is container PDE,
> w_i is the surface area weight of scanning station LED_i,
> CE_i is just from scaling average scanning station PDE_i so it's incorrect.
> 
> When considering A non-uniformity, there is no constraint for the escape
> because QE is unknown at a specific theta.  Therefore, I set the same escape
> for the same type PMT, which is from Yaoguang's measurement, and PMTs' ce
> compensates for variations of the escape among PMTs, and the bias makes new ce
> has a possibility more than one.
> 
> 
> Currently in junoSD_PMT_v2.cc:
> 
>  414     // TODO: get CE and angle response from data.
>  415     // = decide the CE (collection efficiency)
>  416     // = the CE can be different at different position
>  417     // == position
>  418     const G4AffineTransform& trans = track->GetTouchable()->GetHistory()->GetTopTransform();
>  419     const G4ThreeVector& global_pos = postStepPoint->GetPosition();
>  420     G4ThreeVector local_pos = trans.TransformPoint(global_pos);
>  421 
>  422     double qe = 1;
>  423     double ce = 1;
>  424     // == get the copy number -> pmt id
>  425     int pmtID = get_pmtid(track);
>  426     // = final DE = QE * CE, 
>  427     // but QE is already applied (this is old implementation,
>  428     // Now we use PMTSimParamSvc to get real QE and CE ), so only CE is important.
>  429     // = DE: Detection Efficiency
>  430     if(m_use_pmtsimsvc){
>  431         qe = (m_enable_optical_model && PMT::Is20inch(pmtID)) ? 1.0 : m_PMTSimParsvc->get_pmtid_qe(pmtID,edep);
>  432         ce = m_PMTSimParsvc->get_pmtid_ce(pmtID,local_pos.theta());
>  433      }
>  434      else{
>  435         std::string volname = track->GetVolume()->GetName();
>  436     GetQEandCEByOldWay(qe , ce , pmtID,  volname, local_pos);
>  437      }
>  438 
>  439     double f_angle_response = 1.0;
>  440     double de = qe*ce*f_angle_response ;
>  441     if (de>1.0){
>  442         std::cout<<"junoSD_PMT_v2:: de is larger than 1.0"<<std::endl;
>  443     }
>  444     bool de_cull = G4UniformRand() > de ;
>  445 
>  446 
>  447 
>  448 
> 
> 
> Here qe = 1, since qe has been simulated in C4. It samples only ce.
> Once ce > 1, it cannot set a probability over one for a photon to be collected.
> Therefore, I moved the escape here in the new mode, since escape x ce < 1 and
> could avoid the sampling problem.
> 
> I tried adding PMTAccessor::get_stackspec_test, which sets the new thickness
> when giving a specific theta and pmtid.
> 
> I think in the C4 new implementation mode, it can use get_stackspec_test, and
> not calculate An but directly set theEfficiency = 1, since the escape will be
> sampled in junoSD_PMT_v2.cc.




I am concerned that the changes you are making will prevent use of the 
old implementation from the same code base and set of data files. It is 
very important to make changes in such a way that you can compare old and 
new implementations from the same codebase and set of files. Comparing 
between different versions of a codebase/files is just not practical as 
there are always lots of other changes that are impossible to disentangle
from the change you are making. 

Can you reassure me that the changes you are making will allow
switching between implementations via a simple runtime switch ? 
This is especially important as coordinated changes are needed across
3 packages: JUNOSW, Custom4, Opticks 

Working this way will also enable you to communicate what you want 
to do more clearly as you can make the changes within implementation 
if blocks. 

Note that the calculation you do in JUNOSW needs to be duplicated in Opticks
and that means the inputs you base that calculation on need to be 
copied to the GPU. Mainly in qudarap/qpmt.h and qudarap/qsim.h::

    1731 inline QSIM_METHOD int qsim::propagate_at_surface_CustomART(unsigned& flag, curandStateXORWOW& rng, sctx& ctx) const
    1732 {
    1733 
    1734     const sphoton& p = ctx.p ;
    1735     const float3* normal = (float3*)&ctx.prd->q0.f.x ;  // geometrical outwards normal 
    1736     int lpmtid = ctx.prd->identity() - 1 ;  // identity comes from optixInstance.instanceId where 0 means not-a-sensor  
    1737     //int lpmtid = p.identity ; 
    1738 
    1739     float minus_cos_theta = dot(p.mom, *normal);
    1740     float dot_pol_cross_mom_nrm = dot(p.pol,cross(p.mom,*normal)) ;
    ....
    1759     if(lpmtid < 0 )
    1760     {
    1761         flag = NAN_ABORT ;
    1762 #if !defined(PRODUCTION) && defined(DEBUG_PIDX)
    1763         //if( ctx.idx == base->pidx ) 
    1764         printf("//qsim::propagate_at_surface_CustomART idx %7d lpmtid %d : ERROR NOT-A-SENSOR : NAN_ABORT \n", ctx.idx, lpmtid );
    1765 #endif
    1766         return BREAK ;
    1767     }
    1768 
    1769 
    1770     float ARTE[4] ;
    1771     if(lpmtid > -1) pmt->get_lpmtid_ARTE(ARTE, lpmtid, p.wavelength, minus_cos_theta, dot_pol_cross_mom_nrm );
    1772 
    1773 #if !defined(PRODUCTION) && defined(DEBUG_PIDX)
    1774     if( ctx.idx == base->pidx )
    1775     printf("//qsim::propagate_at_surface_CustomART idx %d lpmtid %d wl %7.3f mct %7.3f dpcmn %7.3f ARTE ( %7.3f %7.3f %7.3f %7.3f ) \n",
    1776            ctx.idx, lpmtid, p.wavelength, minus_cos_theta, dot_pol_cross_mom_nrm, ARTE[0], ARTE[1], ARTE[2], ARTE[3] );
    1777 #endif
    1778 
    1779 
    1780     const float& theAbsorption = ARTE[0];
    1781     //const float& theReflectivity = ARTE[1]; 
    1782     const float& theTransmittance = ARTE[2];
    1783     const float& theEfficiency = ARTE[3];
    1784 
    1785     float u_theAbsorption = curand_uniform(&rng);
    1786     int action = u_theAbsorption < theAbsorption  ? BREAK : CONTINUE ;
    1787 
    1788 
    1789 #if !defined(PRODUCTION) && defined(DEBUG_PIDX)
    1790     if( ctx.idx == base->pidx )
    1791     printf("//qsim.propagate_at_surface_CustomART idx %d lpmtid %d ARTE ( %7.3f %7.3f %7.3f %7.3f ) u_theAbsorption  %7.3f action %d \n",
    1792         ctx.idx, lpmtid, ARTE[0], ARTE[1], ARTE[2], ARTE[3], u_theAbsorption, action  );
    1793 #endif
    1794     
    1795     if( action == BREAK )
    1796     {
    1797         float u_theEfficiency = curand_uniform(&rng) ;
    1798         flag = u_theEfficiency < theEfficiency ? SURFACE_DETECT : SURFACE_ABSORB ;
    1799     }
    1800     else
    1801     {
    1802         propagate_at_boundary( flag, rng, ctx, theTransmittance  );
    1803     }
    1804     return action ;
    1805 }


I made some recent additions to Opticks to enable this.
In sysrap/S4MaterialPropertyVector.h I added new API to 
serialize/import vectors of G4MaterialPropertyVector


     24 struct S4MaterialPropertyVector
     25 {
     26     static NP* ConvertToArray(const G4MaterialPropertyVector* vec);
     27     static G4MaterialPropertyVector* Load(const char* path);
     28 
     29     static G4MaterialPropertyVector* FromArrayData(const double* aa, int ni, int nj  );
     30     static G4MaterialPropertyVector* FromArray(const NP* prop);
     31     static G4MaterialPropertyVector* Make_V(double value);
     32     static std::string Desc_V(const G4MaterialPropertyVector* v);
     33 
     34 
     35     static void    Import_VV(         std::vector<G4MaterialPropertyVector*>& vv, const NPFold* f ) ;
     36     static NPFold* Serialize_VV(const std::vector<G4MaterialPropertyVector*>& vv ) ;
     37     static std::string  Desc_VV(const std::vector<G4MaterialPropertyVector*>& vv ) ;
     38 
     39     static void  Import_VV_CombinedArray(          std::vector<G4MaterialPropertyVector*>& vv, const NP* vvcom );
     40     static NP* Serialize_VV_CombinedArray(   const std::vector<G4MaterialPropertyVector*>& vv ) ;
     41     static std::string Desc_VV_CombinedArray(const std::vector<G4MaterialPropertyVector*>& vv );
     42 

In sysrap/NPX.h new API for handling vectors of std::array

      46     template<typename T, int N>
      47     static NP* ArrayFromVecOfArrays(const std::vector<std::array<T,N>>& va );
      48 
      49     template<typename T, int N>
      50     static void VecOfArraysFromArray( std::vector<std::array<T,N>>& va, const NP* a );
      51 


This new Opticks functionality will need to be used from _PMTSimParamData.h 
to get the necessary extra PMT information onto the GPU. 


Simon


